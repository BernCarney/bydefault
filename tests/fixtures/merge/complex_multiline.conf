## This file contains complex multiline values with various formatting patterns
## to test the merge utility's ability to handle them correctly

[search_commands]
# Multi-line search with embedded SPL and multiple pipes
# This tests complex search string preservation during merge
search = index=main sourcetype=access_combined \
    earliest=-24h \
| fields clientip, status, uri_path, useragent \
| stats count by clientip, status \
| sort -count \
| head 100

# Nested multi-line values with mixed indentation
search_with_comments = index=security sourcetype=firewall \
    # This comment should be preserved in the exact position \
    host=fw* \
    action=blocked \
    # This describes the following operation \
| stats count as block_count by src_ip, dest_ip \
| where block_count > 10

[transforms]
# Complex REGEX with escaped characters and multiple lines
# This tests preservation of special characters in multi-line values
REGEX-extract_fields = (?<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z) \
    (?<level>INFO|WARN|ERROR|DEBUG) \
    \[(?<thread>[^\]]+)\] \
    (?<logger>[^ ]+) - (?<message>.*)

# Multi-line transform with embedded calculations and functions
EVAL-severity_level = case( \
    match(log_level, "^ERROR"), \
        case( \
            match(message, ".*OutOfMemory.*"), "critical", \
            match(message, ".*Exception.*"), "high", \
            match(message, ".*failure.*"), "medium", \
            true(), "low" \
        ), \
    match(log_level, "^WARN"), \
        case( \
            match(message, ".*timeout.*"), "medium", \
            match(message, ".*deprecated.*"), "low", \
            true(), "info" \
        ), \
    true(), "info" \
)

[props:app:myapp]
# Advanced multi-line REPORT with mixed continuation styles
# Tests handling of inconsistent continuation formats
REPORT-parse_json = \
    (?<json>\{(?:[^{}]++|(?R))*+\})
# Inline EVAL referencing the above REPORT
EVAL-parsed_data = spath(json, "data") \
    # This is a comment in the middle of an EVAL \
    | eval temp = spath(json, "metadata.type") \
    | if(isnotnull(temp), temp, "unknown") \
    # The following continues the expression \
    . " [" . spath(json, "metadata.source") . "]"

# Settings that use multi-line format but aren't actually multi-line
# This tests the parser's ability to distinguish actual multi-lines from false positives
FIELDALIAS-tricky = host AS server_name hostname AS system_name \
sourcetype AS log_type

[alert:complex_automation]
# Multi-line action with complex embedded script
# This tests preservation of indentation and script formatting
action.script = if severity_level == "critical": \
    # Send immediate notification \
    notify_team("security", \
        subject="Critical Security Alert", \
        body=f"Critical alert detected: {alert_name}\n\nDetails: {result_link}") \
    \
    # Create incident ticket \
    create_incident( \
        priority=1, \
        assignee="security-oncall", \
        description=f"Alert: {alert_name}\nTriggered: {trigger_time}\nDetails: {results_link}" \
    )

# Multi-line action with embedded JSON
action.payload = { \
    "alert_name": "$name$", \
    "severity": "$result.severity_level$", \
    "trigger_time": "$trigger_time$", \
    "results": { \
        "count": "$result.count$", \
        "source": "$result.source$", \
        "fields": [ \
            $result.field_list$ \
        ] \
    }, \
    "description": "This alert was triggered at $trigger_time$ with severity $result.severity_level$" \
} 
# Example of a real-world Splunk transforms.conf file with complex multi-line values

###################
## Data Extractions
###################

# Extract hostname and process name from syslog events
[syslog_extract]
REGEX = ^(?:[^ \n]* ){3}(?:[^ \n]* ){2}([^ \n]*)[ \n]*(?:\[[a-zA-Z0-9_-]*\])?[ \n]*(?:\[[a-zA-Z0-9_-]*\])?[ \n]*([^:]*):
FORMAT = hostname::$1 process::$2
DEST_KEY = FIELDS

# Extract fields from web access logs
[apache_extract]
REGEX = ^([^ ]*) ([^ ]*) ([^ ]*) \[([^\]]*)\] "([^"]*)" ([^ ]*) ([^ ]*)(?: "([^"]*)" "([^"]*)")?.*
FORMAT = remote_host::$1 remote_logname::$2 user::$3 time::$4 request::$5 status::$6 bytes::$7 referer::$8 user_agent::$9
DEST_KEY = FIELDS

###############
## Field Lookups
###############

# Map user IDs to names
[user_lookup]
filename = user_info.csv
min_matches = 1
default_match = unknown
case_sensitive_match = 0
match_type = EXACT
external_type = kvstore
external_cmd = |inputlookup user_info.csv | search user_id=="$user_id$"

################
## Calculations
################

# Calculate response time categories with complex multi-line CASE statement
[response_time_categories]
INGEST_EVAL = response_category = case( \
    response_time < 100, "fast", \
    response_time < 500, "medium", \
    response_time < 1000, "slow", \
    response_time < 3000, "very slow", \
    response_time < 10000, "critical", \
    true(), "broken" \
)

# Complex nested case statement for log severity mapping
[severity_calculation]
INGEST_EVAL = severity_level = case( \
    severity=="ERROR" OR severity=="FATAL", \
        case( \
            match(message, ".*(OutOfMemory|OOM).*"), "critical_system", \
            match(message, ".*Exception.*"), "critical_app", \
            match(message, ".*Connection.*"), \
                case( \
                    match(message, ".*timeout.*"), "network_error", \
                    match(message, ".*refused.*"), "service_down", \
                    match(message, ".*unavailable.*"), "service_unavailable", \
                    true(), "general_connection_error" \
                ), \
            true(), "general_error" \
        ), \
    severity=="WARN" OR severity=="WARNING", \
        case( \
            match(message, ".*deprecated.*"), "deprecation_warning", \
            match(message, ".*performance.*"), "performance_warning", \
            true(), "general_warning" \
        ), \
    severity=="INFO", "information", \
    severity=="DEBUG" OR severity=="TRACE", "debug_info", \
    true(), "unknown" \
)

########################
## Multi-line with pipes
########################

# Complex Splunk search with multiple pipe commands and filters
[complex_search_filter]
INGEST_EVAL = filter_search = "index=security sourcetype=firewall " . \
    "host=fw* " . \
    "action=blocked " . \
    "| stats count as block_count by src_ip, dest_ip " . \
    "| where block_count > 5 " . \
    "| lookup ip_reputation.csv ip as src_ip OUTPUT category as src_category " . \
    "| lookup ip_reputation.csv ip as dest_ip OUTPUT category as dest_category " . \
    "| where src_category=\"malicious\" OR dest_category=\"malicious\" " . \
    "| sort -block_count"

#########################
## Field extractions
#########################

# Extract fields with multiple REGEX patterns
[json_field_extraction]
REGEX = (?m)^(?:[^{]*)(\{(?:[^{}]|(?1))*})
FORMAT = json_payload::$1
DEST_KEY = FIELDS

# Multi-line REGEX with embedded comments
[custom_log_extraction]
REGEX = (?xi)^              # Start of line with case-insensitive and verbose mode \
    ([A-F0-9]{8})          # 8-character hex ID \
    \s+                    # Whitespace \
    (\d{4}-\d{2}-\d{2})    # Date in YYYY-MM-DD format \
    \s+                    # Whitespace \
    (\d{2}:\d{2}:\d{2})    # Time in HH:MM:SS format \
    \s+                    # Whitespace \
    \[([^\]]+)\]           # Content in square brackets (component) \
    \s+                    # Whitespace \
    <([^>]+)>              # Content in angle brackets (severity) \
    \s+                    # Whitespace \
    (.*)$                  # The rest of the line (message)
FORMAT = id::$1 date::$2 time::$3 component::$4 severity::$5 message::$6
DEST_KEY = FIELDS

###############
## Data masking
###############

# Mask sensitive data like credit cards
[mask_credit_cards]
INGEST_EVAL = masked_payload = replace( \
    _raw, \
    "(?<!\d)(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\d{3})\d{11})(?!\d)", \
    "XXXX-XXXX-XXXX-XXXX" \
)

# Mask email addresses
[mask_emails]
INGEST_EVAL = masked_data = replace( \
    _raw, \
    "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", \
    "email@masked.com" \
)

#############
## Validation
#############

# Validate event against schema
[event_validation]
INGEST_EVAL = valid_event = if( \
    isnotnull(user) AND len(user) > 0 AND \
    isnotnull(action) AND match(action, "^(view|edit|delete|create)$") AND \
    isnotnull(object_id) AND match(object_id, "^[A-F0-9]{24}$") AND \
    isnotnull(timestamp) AND isnum(timestamp), \
    "valid", \
    "invalid" \
) 